Consistency of test cases / avoid duplicate code
================================================

  * Extend `AnisotropicMetricDriver` to vertex-based case and include common metrics as methods.
  * Run scripts / tests for all test cases. e.g. Check convergence of TELEMAC-2D test case under
    uniform refinement.


HDG formulation used by Thomas
==============================

  * Use hybridization on the Lax-Friedrichs formulation to get a Lagrange multiplier on a
    vector-valued trace space.
  * Then statically condense down to the vector-trace system using an exact Schur complement.
  * The direct AMG on the trace system should work just fine (for example, using GAMG)
  * Once you have the HDG formulation written down, should be able to use firedrake.SCPC on it
    just like in the HDG poisson example firedrake/tests/slate/test_hdg_poisson.py
  * Try to not use LU on the trace system and go for a preconditioned Krylov method instead
  * You will get more mileage out of LU for HDG since the condensed system is much smaller
  * It will depend on how "fine" you want to  make the problem
  * Ask Thomas if need help formulating the HDG problem


Loading and saving meshes in consistent format
==============================================

  * The most sensible format is probably DMPlex. We can already load from this. In serial doing both
    is easy.
  * If we want to save and load state then it becomes more complicated. There are a hierarchy of
    things we need to be able to store in parallel: the mesh, the function space and the functions.
  * `DumbCheckpoint` already enables the user to load a function, but it assumes the function space
    has been provided and it is identical, with the same parallel decomposition.
  * It would take some work to arrange for all of this to happen.
